import type { Meta, StoryObj } from "@storybook/react";
import { css } from "autostack-ui/styled-system/css";
import { AutoStack } from "./AutoStack";
import { Contents } from "../contents/Contents";
import { sections } from "@/constants/sections";
import { Section } from "../section";
import { AutoStackProps, ResolvedProps } from "./types";

const BG = {
    base: "#bada55",
    sm: "violet",
    md: "blue",
    lg: "orange",
    xl: "purple",
};

// what was this for again?
const extractArgTypes = (component: any) => {
    //github.com/storybookjs/storybook/issues/15780

    // if (component) {
    //   const { rows } = extractProps(component);
    //   if (rows) {
    //     return rows.reduce((acc: StrictArgTypes, row: PropDef) => {
    //       const {
    //         name,
    //         description,
    //         type,
    //         sbType,
    //         defaultValue: defaultSummary,
    //         jsDocTags,
    //         required,
    //       } = row;

    //       acc[name] = {
    //         name,
    //         description,
    //         type: { required, ...sbType },
    //         table: {
    //           type,
    //           jsDocTags,
    //           defaultValue: defaultSummary,
    //         },
    //       };
    //       return acc;
    //     }, {});
    //   }
    // }

    return null;
};

// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: "AutoStack",
    component: AutoStack,

    // parameters: {
    //     docs: {
    //         extractArgTypes,
    //     },
    // },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ["autodocs"],
    parameters: {
        controls: {
            exclude: ["ref"],
        },
    },
    argTypes: {
        direction: {
            control: "select",
            options: ["vertical", "horizontal"],
        },
        gap: {
            control: "radio",
            // TODO
            // panda wont actually have all these values statically generated by default... there are tricks for this in the panda docs
            options: ["0", "1", "2", "3", "4"],
        },
        // TODO
        // I'd like to make the controls change based on the direction
        // haven't yet figured out how to do this
        hAlign: {
            control: "radio",
            if: { arg: "direction", eq: "horizontal" },
            options: [
                "left",
                "center",
                "right",
                "between",
                "around",
                "evenly",
                "stretch",
                undefined,
            ],
        },
        vAlign: {
            control: "radio",
            options: [
                "top",
                "middle",
                "bottom",
                "between",
                "around",
                "evenly",
                "stretch",
                undefined,
            ],
        },
    },
} satisfies Meta<AutoStackProps>;

export default meta;
type Story = StoryObj<typeof meta>;

// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Configure: Story = {
    args: {
        direction: "horizontal",
        gap: "3",
    },
    parameters: {
        chromatic: { disable: true },
    },

    render: (args) => (
        <AutoStack h="500px" className={css({ outline: "1px solid red" })} {...args}>
            <Contents />
        </AutoStack>
    ),
};

export const All: Story = {
    args: {
        direction: "vertical",
    },
    render: (args) => (
        <AutoStack direction="vertical" hAlign="stretch" gap="3" m="2">
            {sections.map((section, index) => (
                <Section key={index} section={section} CustomElement={AutoStack} />
            ))}
        </AutoStack>
    ),
    parameters: {
        controls: { disable: true },
    },
};
export const Responsive: Story = {
    args: {
        direction: "vertical",
    },
    parameters: {
        chromatic: { disable: true },
        controls: { disable: true },
        // could setup some snapshots of different breakpoints
        // chromatic: { viewports: [320, 1200] },
    },
    render: (args) => (
        <AutoStack direction="vertical" hAlign="stretch" gap="3">
            <AutoStack
                gap="4"
                h="350px"
                vAlign={{
                    // base: "top",
                    sm: "middle",
                    md: "bottom",
                    lg: "top",
                }}
                hAlign={{
                    // base: "right",
                    sm: "center",
                    md: "right",
                    lg: "left",
                }}
                direction={
                    {
                        base: "vertical",
                        sm: "vertical",
                        md: "horizontal",
                        lg: "vertical",
                    } as any // the discriminated union of these types is breaking the responsive types for direction
                }
                bg={BG}
            >
                <Contents />
            </AutoStack>
        </AutoStack>
    ),
};
